<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

    <!-- Mybatis会动态实现daoImpl,不过需要在mapper文件夹下创建BookDao.xml和AppointmentDao.xml
    spring-dao.xml文件会自动扫描mapper文件夹下的配置 -->
    <!-- 
    1.namespace是该xml对应的接口的全名
    2.select和update中的id对应方法名
    3.resultType是返回值类型
    4.parameterType是参数类型(可选)
    5.#{...}填写的是方法的参数 
    6.parameterType:输入参数类型
    7.resultType:输出参数类型
  -->
  <mapper namespace="com.limingyi.dao.NoticeMapper">
   <!-- 目的：为dao接口方法提供sql语句配置 -->
   <resultMap id="BaseResultMap" type="com.limingyi.entity.Notice">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="notice_user_id" jdbcType="VARCHAR" property="noticeuserId"/>
    <result column="is_read" jdbcType="BIT" property="isRead"/>
    <result column="topic_id" jdbcType="INTEGER" property="topicId"/>
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate"/>
     <result column="target_user_id" jdbcType="INTEGER" property="targetuserId"/>
  
  </resultMap>
  <sql id="Base_Column_List">
   id,notice_user_id,is_read,topic_id,create_date,target_user_id
  </sql>
  <!-- 判断是否有未读通知 和数量-->
  <select id="isRead" resultType="java.lang.Integer">
    SELECT
    count(1)
    FROM
    notice
    where is_read = 0 
    and target_user_id = #{uid,jdbcType=INTEGER}
  </select>
  <update id="updateIsRead">
   update notice
    set is_read = 1
    where target_user_id = #{uid,jdbcType=INTEGER}
  </update>
   <!-- 添加通知 -->
  <insert id="insert" parameterType="com.limingyi.entity.Notice" >
    insert into  notice 
    (
    notice_user_id,
    topic_id ,
    is_read, 
    create_date, 
    target_user_id
 )
    values 
    ( 
    #{noticeuserId}, 
    #{topicId}, 
    #{isRead}, 
    #{createDate}, 
    #{targetuserId}
    )
  </insert>
</mapper>